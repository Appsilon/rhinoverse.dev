{"version":3,"sources":["main.js"],"names":["desktopHexData","hexGrid","document","getElementById","getCellWidth","total","getCell","hex","totalInBigRow","totalInSmallRow","column","row","scale","isAnimated","icon","isDetached","cell","createElement","className","style","padding","innerHTML","width","reduce","max","curr","newRowTopMargin","Math","sqrt","newBigRowWidth","newBigRowLeftMargin","lastRowBottomMargin","forEach","index","newRow","marginTop","marginLeft","marginBottom","appendChild","lastRow","lastElementChild"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AACA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAhB;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAY,GAAE,IAAKA,KAAL,GAAc,GAAI,GAArD,C,CAEA;;;AACA,MAAMC,OAAO,GAAG,CAACC,GAAD,EAAMC,aAAN,EAAqBC,eAArB,KAAyC;AACvD,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,GAAV;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA,UAAtB;AAAkCC,IAAAA,IAAlC;AAAwCC,IAAAA;AAAxC,MAAuDR,GAA7D;AACA,QAAMS,IAAI,GAAGd,QAAQ,CAACe,aAAT,CAAuB,KAAvB,CAAb;AACAD,EAAAA,IAAI,CAACE,SAAL,GAAiB,gBAAjB;AACAF,EAAAA,IAAI,CAACG,KAAL,CAAWC,OAAX,GAAsB,GAAE,IAAIR,KAAM,GAAlC;AACAI,EAAAA,IAAI,CAACK,SAAL,GAAkB;;;;GAAlB;AAKAL,EAAAA,IAAI,CAACG,KAAL,CAAWG,KAAX,GAAmBX,GAAG,GAAG,CAAN,KAAY,CAAZ,GACjBP,YAAY,CAACI,aAAD,CADK,GAEjBJ,YAAY,CAACK,eAAD,CAFd;AAGA,SAAOO,IAAP;AACD,CAdD;;AAiBA,MAAMR,aAAa,GAAGR,cAAc,CAACuB,MAAf,CAAsB,CAACC,GAAD,EAAMC,IAAN,KAC1CA,IAAI,CAACf,MAAL,GAAcc,GAAG,CAACd,MAAlB,GAA2Be,IAA3B,GAAkCD,GADd,EACmBd,MADzC;AAEA,MAAMD,eAAe,GAAGD,aAAa,GAAG,CAAxC;AACA,MAAMkB,eAAe,GAAI,GAAE,CAAC,CAAD,IAAMjB,eAAe,GAAI,CAAzB,IAA8BkB,IAAI,CAACC,IAAL,CAAU,CAAV,CAA9B,GAA6C,GAA7C,GAAmD,GAAI,GAAlF;AACA,MAAMC,cAAc,GAAI,GAAGrB,aAAD,GAAkBC,eAAlB,GAAoC,GAAI,GAAlE;AACA,MAAMqB,mBAAmB,GAAI,GAAE,CAAC,CAAD,IAAMrB,eAAe,GAAG,CAAxB,IAA6B,GAAI,GAAhE;AACA,MAAMsB,mBAAmB,GAAG,OAA5B;AAEA/B,cAAc,CAACgC,OAAf,CAAuB,CAACzB,GAAD,EAAM0B,KAAN,KAAgB;AACrC,QAAM;AAAEvB,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAkBJ,GAAxB,CADqC,CAGrC;;AACA,MAAIG,MAAM,KAAK,CAAf,EAAkB;AAChB,UAAMwB,MAAM,GAAGhC,QAAQ,CAACe,aAAT,CAAuB,KAAvB,CAAf;AACAiB,IAAAA,MAAM,CAAChB,SAAP,GAAmB,eAAnB;AACAgB,IAAAA,MAAM,CAACf,KAAP,CAAagB,SAAb,GAAyBT,eAAzB;;AACA,QAAIf,GAAG,GAAG,CAAN,KAAY,CAAhB,EAAmB;AACjBuB,MAAAA,MAAM,CAACf,KAAP,CAAaG,KAAb,GAAqBO,cAArB;AACAK,MAAAA,MAAM,CAACf,KAAP,CAAaiB,UAAb,GAA0BN,mBAA1B;AACD;;AACD,QAAInB,GAAG,KAAK,CAAZ,EAAeuB,MAAM,CAACf,KAAP,CAAakB,YAAb,GAA4BN,mBAA5B;AACf9B,IAAAA,OAAO,CAACqC,WAAR,CAAoBJ,MAApB;AACD;;AAED,QAAMK,OAAO,GAAGtC,OAAO,CAACuC,gBAAxB;AACAD,EAAAA,OAAO,CAACD,WAAR,CAAoBhC,OAAO,CAACC,GAAD,EAAMC,aAAN,EAAqBC,eAArB,CAA3B;AAGD,CApBD","sourcesContent":["import { desktopHexData } from './hex.js';\nconst hexGrid = document.getElementById('hex-grid');\n\nconst getCellWidth = (total) => `${1 / (total) * 100}%`\n\n// get one hexagonal cell\nconst getCell = (hex, totalInBigRow, totalInSmallRow) => {\n  const { column, row, scale, isAnimated, icon, isDetached } = hex;\n  const cell = document.createElement('div');\n  cell.className = 'hex-grid__cell';\n  cell.style.padding = `${1 - scale}%`;\n  cell.innerHTML = `\n    <svg class=\"hex-grid__svg\" viewBox=\"0 0 100 115.47\">\n      <use href=\"images/vectors.svg#hex\"></use>\n    </svg>\n  `;\n  cell.style.width = row % 2 === 0\n  ? getCellWidth(totalInBigRow)\n  : getCellWidth(totalInSmallRow);\n  return cell;\n}\n\n\nconst totalInBigRow = desktopHexData.reduce((max, curr) =>\n  curr.column > max.column ? curr : max).column;\nconst totalInSmallRow = totalInBigRow - 1;\nconst newRowTopMargin = `${-1 / (totalInSmallRow  * 2) / Math.sqrt(3) * 100 - 0.2}%`;\nconst newBigRowWidth = `${(totalInBigRow) / totalInSmallRow * 100}%`;\nconst newBigRowLeftMargin = `${-1 / (totalInSmallRow * 2) * 100}%`;\nconst lastRowBottomMargin = '-60px';\n\ndesktopHexData.forEach((hex, index) => {\n  const { column, row } = hex;\n\n  // create new row wrapping hexagon cells\n  if (column === 1) {\n    const newRow = document.createElement('div');\n    newRow.className = 'hex-grid__row';\n    newRow.style.marginTop = newRowTopMargin;\n    if (row % 2 === 0) {\n      newRow.style.width = newBigRowWidth;\n      newRow.style.marginLeft = newBigRowLeftMargin;\n    }\n    if (row === 5) newRow.style.marginBottom = lastRowBottomMargin;\n    hexGrid.appendChild(newRow);\n  }\n\n  const lastRow = hexGrid.lastElementChild;\n  lastRow.appendChild(getCell(hex, totalInBigRow, totalInSmallRow));\n\n\n});"],"file":"main.js"}