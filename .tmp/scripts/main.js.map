{"version":3,"sources":["main.js"],"names":["desktopHexData","hexGrid","document","getElementById","getCell","hex","index","column","row","scale","isAnimated","icon","isDetached","cell","createElement","className","style","width","innerHTML","totalInRow","containerWidth","clientWidth","cellWidth","cellHeight","factor","filter","forEach","newRow","marginTop","marginLeft","appendChild","lastRow","lastElementChild"],"mappings":"AAAA,SAASA,cAAT,QAA+B,UAA/B;AAEA,MAAMC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAhB;;AAEA,MAAMC,OAAO,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AAC9B,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,GAAV;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA,UAAtB;AAAkCC,IAAAA,IAAlC;AAAwCC,IAAAA;AAAxC,MAAuDP,GAA7D;AACA,QAAMQ,IAAI,GAAGX,QAAQ,CAACY,aAAT,CAAuB,KAAvB,CAAb;AACAD,EAAAA,IAAI,CAACE,SAAL,GAAiB,gBAAjB,CAH8B,CAI9B;;AACAF,EAAAA,IAAI,CAACG,KAAL,CAAWC,KAAX,GAAmBT,GAAG,GAAG,CAAN,KAAY,CAAZ,GAAiB,GAAE,IAAI,CAAJ,GAAQ,GAAI,GAA/B,GAAqC,GAAE,IAAI,CAAJ,GAAQ,GAAI,GAAtE;AACAK,EAAAA,IAAI,CAACK,SAAL,GAAkB;;;;GAAlB;AAKA,SAAOL,IAAP;AACD,CAZD;;AAcA,MAAMM,UAAU,GAAG,CAAnB;AACA,MAAMC,cAAc,GAAGnB,OAAO,CAACoB,WAA/B;AACA,MAAMC,SAAS,GAAGF,cAAc,GAAGD,UAAnC;AACA,MAAMI,UAAU,GAAGD,SAAS,GAAG,MAA/B;AAIA,MAAME,MAAM,GAAGxB,cAAc,CAACyB,MAAf,CAAsBpB,GAAG,IAAIA,GAAG,CAACG,GAAJ,KAAY,CAAzC,CAAf;AAEAR,cAAc,CAAC0B,OAAf,CAAuB,CAACrB,GAAD,EAAMC,KAAN,KAAgB;AACrC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,GAAV;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA,UAAtB;AAAkCC,IAAAA,IAAlC;AAAwCC,IAAAA;AAAxC,MAAuDP,GAA7D,CADqC,CAGrC;;AACA,MAAIE,MAAM,KAAK,CAAf,EAAkB;AAChB,UAAMoB,MAAM,GAAGzB,QAAQ,CAACY,aAAT,CAAuB,KAAvB,CAAf;AACAa,IAAAA,MAAM,CAACZ,SAAP,GAAmB,eAAnB;AACAY,IAAAA,MAAM,CAACX,KAAP,CAAaY,SAAb,GAA0B,GAAE,CAAC,GAAI,GAAjC;;AACA,QAAIpB,GAAG,GAAG,CAAN,KAAY,CAAhB,EAAmB;AACjBmB,MAAAA,MAAM,CAACX,KAAP,CAAaC,KAAb,GAAsB,GAAE,IAAI,CAAJ,GAAQ,GAAI,GAApC;AACAU,MAAAA,MAAM,CAACX,KAAP,CAAaa,UAAb,GAA2B,GAAE,CAAC,CAAD,GAAK,EAAL,GAAU,GAAI,GAA3C;AACD;;AACD5B,IAAAA,OAAO,CAAC6B,WAAR,CAAoBH,MAApB;AACD;;AAED,QAAMI,OAAO,GAAG9B,OAAO,CAAC+B,gBAAxB;AACAD,EAAAA,OAAO,CAACD,WAAR,CAAoB1B,OAAO,CAACC,GAAD,EAAMC,KAAN,CAA3B;AAGD,CAnBD","sourcesContent":["import { desktopHexData } from './hex.js';\n\nconst hexGrid = document.getElementById('hex-grid');\n\nconst getCell = (hex, index) => {\n  const { column, row, scale, isAnimated, icon, isDetached } = hex;\n  const cell = document.createElement('div');\n  cell.className = 'hex-grid__cell';\n  //cell.style.padding = `${1 - scale}%`;\n  cell.style.width = row % 2 === 0 ? `${1 / 8 * 100}%` : `${1 / 7 * 100}%`;\n  cell.innerHTML = `\n    <svg class=\"hex-grid__svg\" viewBox=\"0 0 100 115.47\">\n      <use href=\"images/vectors.svg#hex\"></use>\n    </svg>\n  `;\n  return cell;\n}\n\nconst totalInRow = 7;\nconst containerWidth = hexGrid.clientWidth;\nconst cellWidth = containerWidth / totalInRow;\nconst cellHeight = cellWidth * 1.1547;\n\n\n\nconst factor = desktopHexData.filter(hex => hex.row === 1);\n\ndesktopHexData.forEach((hex, index) => {\n  const { column, row, scale, isAnimated, icon, isDetached } = hex;\n\n  // create new row\n  if (column === 1) {\n    const newRow = document.createElement('div');\n    newRow.className = 'hex-grid__row';\n    newRow.style.marginTop = `${-4.2}%`;\n    if (row % 2 === 0) {\n      newRow.style.width = `${8 / 7 * 100}%`;\n      newRow.style.marginLeft = `${-1 / 14 * 100}%`;\n    }\n    hexGrid.appendChild(newRow);\n  }\n\n  const lastRow = hexGrid.lastElementChild;\n  lastRow.appendChild(getCell(hex, index));\n\n\n});"],"file":"main.js"}